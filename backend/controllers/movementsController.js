const StockMovement = require('../models/StockMovement');
const Product = require('../models/Product');

// Registrar movimenta√ß√£o de estoque
exports.registerMovement = async (req, res) => {
  try {
    console.log('üì¶ Dados recebidos no backend:', req.body);
    
    const { productId, type, quantity, note, invoiceNumber, user, cafeteria, previousStock, newStock } = req.body;
    
    // Validar campos obrigat√≥rios
    if (!productId || !type || quantity === undefined || quantity === null) {
      return res.status(400).json({ 
        message: 'Campos obrigat√≥rios faltando: productId, type, quantity' 
      });
    }
    
    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ message: 'Produto n√£o encontrado' });
    }
    
    const numericQuantity = parseInt(quantity);
    const numericPreviousStock = parseInt(previousStock) || product.stock;
    let numericNewStock = numericPreviousStock;
    
    // Atualizar estoque conforme o tipo de movimenta√ß√£o
    if (type === 'entrada' || type === 'ajuste_entrada') {
      numericNewStock = numericPreviousStock + numericQuantity;
    } else if (type === 'ajuste_saida' || type === 'perda' || type === 'venda') {
      if (numericPreviousStock < numericQuantity) {
        return res.status(400).json({ 
          message: `Estoque insuficiente. Estoque atual: ${numericPreviousStock}` 
        });
      }
      numericNewStock = numericPreviousStock - numericQuantity;
    }
    
    // Atualizar produto
    product.stock = numericNewStock;
    await product.save();
    
    // Registrar movimenta√ß√£o - USANDO OS NOMES CORRETOS DO MODELO
const movementData = {
  productId,
  type,
  quantity: numericQuantity,
  note: note || '',
  invoiceNumber: invoiceNumber || '',
  userId: user || 'admin', // Use userId em vez de user
  cafeteria: cafeteria || 'Cafeteria Principal',
  previousStock: numericPreviousStock,
  newStock: numericNewStock
};
    
    console.log('üìù Dados para salvar no movimento:', movementData);
    
    const movement = new StockMovement(movementData);
    await movement.save();
    
    console.log('‚úÖ Movimenta√ß√£o salva com sucesso:', movement);
    
    res.status(201).json({
      message: 'Movimenta√ß√£o registrada com sucesso',
      movement
    });
  } catch (error) {
    console.error('‚ùå Erro no registerMovement:', error);
    res.status(500).json({ 
      message: 'Erro interno do servidor',
      error: error.message 
    });
  }
};

// Obter hist√≥rico de movimenta√ß√µes
exports.getMovementsHistory = async (req, res) => {
  try {
    const { startDate, endDate, productId, type, cafeteria } = req.query;
    
    let filter = {};
    
    // Filtrar por data
    if (startDate && endDate) {
      filter.createdAt = {
        $gte: new Date(startDate),
        $lte: new Date(endDate + 'T23:59:59.999Z')
      };
    }
    
    // Filtrar por produto
    if (productId && productId !== 'Todos') {
      filter.productId = productId;
    }
    
    // Filtrar por tipo
    if (type && type !== 'Todos') {
      filter.type = type;
    }
    
    // Filtrar por cafeteria
    if (cafeteria && cafeteria !== 'Todas') {
      filter.cafeteria = cafeteria;
    }
    
    const movements = await StockMovement.find(filter)
      .populate('productId', 'name category unit')
      .sort({ createdAt: -1 });
    
    res.json(movements);
  } catch (error) {
    console.error('‚ùå Erro no getMovementsHistory:', error);
    res.status(500).json({ 
      message: 'Erro ao buscar hist√≥rico',
      error: error.message 
    });
  }
};

exports.registerMovement = async (req, res) => {
  try {
    console.log('üìç REGISTER MOVEMENT CALLED');
    console.log('üì¶ Request Body:', JSON.stringify(req.body, null, 2));
    
    const { productId, type, quantity, note, invoiceNumber, user, cafeteria } = req.body;
    
    // Verifique se todos os campos obrigat√≥rios est√£o presentes
    if (!productId || !type || !quantity || !user) {
      console.log('‚ùå Campos obrigat√≥rios faltando');
      return res.status(400).json({ message: 'Campos obrigat√≥rios faltando' });
    }
    
    console.log('üîç Buscando produto:', productId);
    const product = await Product.findById(productId);
    if (!product) {
      console.log('‚ùå Produto n√£o encontrado:', productId);
      return res.status(404).json({ message: 'Produto n√£o encontrado' });
    }
    
    console.log('üìä Produto encontrado:', product.name, 'Estoque atual:', product.stock);
    
    const previousStock = product.stock;
    let newStock = previousStock;
    
    // Atualizar estoque conforme o tipo de movimenta√ß√£o
    if (type === 'entrada' || type === 'ajuste_entrada') {
      newStock = previousStock + quantity;
      console.log('üìà Entrada - Novo estoque:', newStock);
    } else if (type === 'ajuste_saida' || type === 'perda' || type === 'venda') {
      if (previousStock < quantity) {
        console.log('‚ùå Estoque insuficiente:', previousStock, '<', quantity);
        return res.status(400).json({ 
          message: `Estoque insuficiente. Estoque atual: ${previousStock}` 
        });
      }
      newStock = previousStock - quantity;
      console.log('üìâ Sa√≠da - Novo estoque:', newStock);
    }
    
    // Atualizar produto
    console.log('üíæ Salvando produto...');
    product.stock = newStock;
    await product.save();
    console.log('‚úÖ Produto atualizado no banco');
    
    // Registrar movimenta√ß√£o
    console.log('üíæ Criando movimenta√ß√£o...');
    const movement = new StockMovement({
      productId,
      type,
      quantity,
      note: note || '',
      invoiceNumber: invoiceNumber || '',
      user,
      cafeteria: cafeteria || 'Cafeteria Principal',
      previousStock,
      newStock
    });
    
    await movement.save();
    console.log('‚úÖ Movimenta√ß√£o salva no banco');
    
    console.log('üéâ Movimenta√ß√£o conclu√≠da com sucesso!');
    res.status(201).json({
      message: 'Movimenta√ß√£o registrada com sucesso',
      movement
    });
    
  } catch (error) {
    console.error('üí• ERRO NO registerMovement:', error);
    console.error('üí• Stack trace:', error.stack);
    res.status(500).json({ message: error.message });
  }
};